from pycaret.regression import load_model, predict_model
import streamlit as st
import pandas as pd
import numpy as np

from pycaret.nlp import *
#from pycaret.classification import *
from pycaret.regression import *

from pathlib import Path
from pycaret.nlp import *
from pycaret.classification import *

from sklearn.feature_extraction.text import CountVectorizer



#model = load_model('deployment_review_to_ratings_04082022')
model = load_model('deployment_04112022')
model_rating = load_model('deployment_review_to_ratings_04122022')

new_predict_df= pd.DataFrame(columns=['10',
 'able',
 'about',
 'absolutely',
 'across',
 'action',
 'actually',
 'add',
 'adult',
 'adventure',
 'after',
 'again',
 'against',
 'age',
 'ago',
 'all',
 'almost',
 'alone',
 'along',
 'alpha',
 'already',
 'also',
 'although',
 'always',
 'am',
 'amazing',
 'amazon',
 'an',
 'and',
 'another',
 'any',
 'anyone',
 'anything',
 'are',
 'aren',
 'around',
 'as',
 'at',
 'attention',
 'attraction',
 'author',
 'authors',
 'away',
 'awesome',
 'baby',
 'back',
 'bad',
 'based',
 'be',
 'beautiful',
 'became',
 'because',
 'become',
 'becomes',
 'been',
 'before',
 'begin',
 'beginning',
 'begins',
 'behind',
 'being',
 'believable',
 'believe',
 'best',
 'better',
 'between',
 'beyond',
 'big',
 'bit',
 'black',
 'body',
 'book',
 'books',
 'boring',
 'both',
 'bought',
 'boy',
 'boyfriend',
 'break',
 'bring',
 'brings',
 'broken',
 'brother',
 'brothers',
 'brought',
 'building',
 'business',
 'but',
 'buy',
 'by',
 'call',
 'called',
 'came',
 'can',
 'cannot',
 'cant',
 'care',
 'case',
 'caught',
 'certainly',
 'chance',
 'change',
 'changed',
 'chapter',
 'chapters',
 'character',
 'characters',
 'check',
 'chemistry',
 'child',
 'children',
 'class',
 'clean',
 'clear',
 'cliffhanger',
 'close',
 'collection',
 'college',
 'come',
 'comes',
 'coming',
 'complete',
 'completely',
 'complex',
 'connection',
 'continue',
 'continues',
 'control',
 'copy',
 'could',
 'couldn',
 'couple',
 'course',
 'cover',
 'crazy',
 'cute',
 'danger',
 'darcy',
 'dark',
 'daughter',
 'day',
 'days',
 'de',
 'dead',
 'deal',
 'death',
 'decided',
 'deep',
 'definitely',
 'depth',
 'description',
 'despite',
 'detail',
 'details',
 'developed',
 'development',
 'dialogue',
 'did',
 'didn',
 'different',
 'difficult',
 'disappointed',
 'do',
 'does',
 'doesn',
 'doesnt',
 'doing',
 'don',
 'done',
 'down',
 'drama',
 'drawn',
 'due',
 'during',
 'each',
 'early',
 'earth',
 'easily',
 'easy',
 'editing',
 'either',
 'elizabeth',
 'else',
 'emotional',
 'emotions',
 'end',
 'ended',
 'ending',
 'ends',
 'enjoy',
 'enjoyable',
 'enjoyed',
 'enough',
 'entertaining',
 'entire',
 'errors',
 'especially',
 'etc',
 'even',
 'events',
 'ever',
 'every',
 'everyone',
 'everything',
 'evil',
 'ex',
 'exactly',
 'excellent',
 'except',
 'exchange',
 'exciting',
 'expect',
 'expected',
 'experience',
 'extremely',
 'eyes',
 'face',
 'fact',
 'fall',
 'family',
 'fan',
 'fantastic',
 'fantasy',
 'far',
 'fast',
 'father',
 'favorite',
 'feel',
 'feeling',
 'feelings',
 'feels',
 'fell',
 'felt',
 'female',
 'few',
 'fiction',
 'fight',
 'figure',
 'filled',
 'finally',
 'find',
 'finding',
 'finds',
 'fine',
 'finish',
 'finished',
 'first',
 'five',
 'follow',
 'food',
 'for',
 'forced',
 'forward',
 'found',
 'four',
 'free',
 'friend',
 'friends',
 'from',
 'full',
 'fun',
 'funny',
 'further',
 'future',
 'gave',
 'genre',
 'get',
 'gets',
 'getting',
 'girl',
 'girls',
 'give',
 'given',
 'gives',
 'giving',
 'glad',
 'go',
 'god',
 'goes',
 'going',
 'good',
 'got',
 'great',
 'group',
 'grow',
 'guess',
 'guy',
 'guys',
 'had',
 'half',
 'hand',
 'happen',
 'happened',
 'happens',
 'happy',
 'hard',
 'has',
 'hate',
 'have',
 'haven',
 'having',
 'he',
 'hea',
 'head',
 'heart',
 'hell',
 'help',
 'her',
 'here',
 'hero',
 'heroine',
 'herself',
 'high',
 'highly',
 'him',
 'himself',
 'his',
 'historical',
 'history',
 'home',
 'honest',
 'honestly',
 'hooked',
 'hope',
 'hoping',
 'hot',
 'house',
 'how',
 'however',
 'huge',
 'human',
 'humor',
 'hurt',
 'husband',
 'idea',
 'if',
 'im',
 'immediately',
 'important',
 'in',
 'including',
 'information',
 'installment',
 'instead',
 'interest',
 'interested',
 'interesting',
 'into',
 'intriguing',
 'involved',
 'is',
 'isn',
 'issues',
 'it',
 'its',
 'itself',
 'jack',
 'job',
 'journey',
 'just',
 'keep',
 'keeps',
 'kept',
 'kids',
 'kind',
 'kindle',
 'king',
 'knew',
 'know',
 'knowing',
 'known',
 'knows',
 'lack',
 'lady',
 'language',
 'last',
 'later',
 'laugh',
 'lead',
 'learn',
 'learned',
 'least',
 'leave',
 'leaves',
 'left',
 'less',
 'let',
 'level',
 'life',
 'light',
 'like',
 'liked',
 'line',
 'link',
 'list',
 'little',
 'live',
 'lives',
 'living',
 'll',
 'london',
 'long',
 'longer',
 'look',
 'looking',
 'lost',
 'lot',
 'lots',
 'love',
 'loved',
 'loves',
 'loving',
 'made',
 'magic',
 'main',
 'major',
 'make',
 'makes',
 'making',
 'male',
 'man',
 'many',
 'marriage',
 'married',
 'marry',
 'mate',
 'matter',
 'may',
 'maybe',
 'mc',
 'me',
 'mean',
 'means',
 'meet',
 'meeting',
 'meets',
 'men',
 'met',
 'middle',
 'might',
 'military',
 'mind',
 'miss',
 'missing',
 'moment',
 'moments',
 'money',
 'months',
 'more',
 'most',
 'mother',
 'move',
 'mr',
 'ms',
 'much',
 'murder',
 'must',
 'my',
 'myself',
 'mystery',
 'name',
 'need',
 'needed',
 'needs',
 'never',
 'new',
 'next',
 'nice',
 'night',
 'no',
 'normal',
 'not',
 'nothing',
 'novel',
 'novella',
 'novels',
 'now',
 'number',
 'of',
 'off',
 'often',
 'oh',
 'ok',
 'okay',
 'old',
 'older',
 'on',
 'once',
 'one',
 'ones',
 'only',
 'open',
 'opinion',
 'or',
 'order',
 'other',
 'others',
 'our',
 'out',
 'over',
 'overall',
 'own',
 'paced',
 'page',
 'pages',
 'pain',
 'paranormal',
 'parents',
 'part',
 'parts',
 'past',
 'people',
 'perfect',
 'perhaps',
 'person',
 'personal',
 'pick',
 'place',
 'places',
 'plan',
 'play',
 'please',
 'plot',
 'plus',
 'point',
 'poor',
 'possible',
 'potential',
 'pov',
 'power',
 'predictable',
 'premise',
 'present',
 'pretty',
 'previous',
 'probably',
 'problem',
 'problems',
 'protect',
 'put',
 'questions',
 'quick',
 'quickly',
 'quite',
 'rather',
 'rating',
 're',
 'read',
 'reader',
 'readers',
 'reading',
 'reads',
 'ready',
 'real',
 'realistic',
 'realize',
 'really',
 'reason',
 'received',
 'recipes',
 'recommend',
 'recommended',
 'relationship',
 'relationships',
 'remember',
 'rest',
 'review',
 'reviews',
 'rich',
 'ride',
 'right',
 'romance',
 'romantic',
 'run',
 'running',
 'sad',
 'said',
 'sam',
 'same',
 'save',
 'saw',
 'say',
 'saying',
 'says',
 'scene',
 'scenes',
 'school',
 'science',
 'second',
 'secret',
 'secrets',
 'see',
 'seeing',
 'seem',
 'seemed',
 'seems',
 'seen',
 'sees',
 'self',
 'sense',
 'series',
 'seriously',
 'set',
 'setting',
 'several',
 'sex',
 'sexual',
 'sexy',
 'she',
 'short',
 'should',
 'show',
 'shows',
 'side',
 'simple',
 'simply',
 'since',
 'single',
 'sister',
 'situation',
 'situations',
 'slow',
 'small',
 'smart',
 'so',
 'some',
 'someone',
 'something',
 'sometimes',
 'son',
 'soon',
 'sorry',
 'sort',
 'space',
 'special',
 'spent',
 'spoilers',
 'stand',
 'star',
 'stars',
 'start',
 'started',
 'starts',
 'stay',
 'steamy',
 'step',
 'still',
 'stop',
 'stories',
 'story',
 'storyline',
 'strong',
 'stuff',
 'style',
 'such',
 'super',
 'supposed',
 'sure',
 'surprise',
 'surprised',
 'suspense',
 'sweet',
 'take',
 'taken',
 'takes',
 'taking',
 'tale',
 'talk',
 'talking',
 'team',
 'tell',
 'telling',
 'tells',
 'than',
 'thank',
 'that',
 'the',
 'their',
 'them',
 'themselves',
 'then',
 'there',
 'these',
 'they',
 'thing',
 'things',
 'think',
 'thinking',
 'thinks',
 'third',
 'this',
 'thoroughly',
 'those',
 'though',
 'thought',
 'thoughts',
 'three',
 'through',
 'throughout',
 'time',
 'times',
 'title',
 'to',
 'together',
 'told',
 'too',
 'took',
 'top',
 'totally',
 'town',
 'tried',
 'tries',
 'trouble',
 'true',
 'truly',
 'trust',
 'truth',
 'try',
 'trying',
 'turn',
 'turned',
 'turns',
 'twist',
 'twists',
 'two',
 'type',
 'under',
 'understand',
 'unfortunately',
 'unique',
 'until',
 'up',
 'us',
 'use',
 'used',
 'using',
 'usually',
 've',
 'very',
 'view',
 'violence',
 'wait',
 'waiting',
 'want',
 'wanted',
 'wanting',
 'wants',
 'war',
 'was',
 'wasn',
 'way',
 'ways',
 'we',
 'wedding',
 'well',
 'went',
 'were',
 'what',
 'when',
 'where',
 'which',
 'while',
 'who',
 'whole',
 'why',
 'wife',
 'will',
 'wish',
 'with',
 'within',
 'without',
 'woman',
 'women',
 'won',
 'wonderful',
 'word',
 'words',
 'work',
 'worked',
 'working',
 'works',
 'world',
 'worth',
 'would',
 'wouldn',
 'wow',
 'write',
 'writer',
 'writes',
 'writing',
 'written',
 'wrong',
 'year',
 'years',
 'yes',
 'yet',
 'you',
 'young',
 'your',
 'yourself'])

def predict(model, input_df):
   
     
    st.success('The input is {}'.format(input_df))
    predictions_df = predict_model(model, input_df)
    
    st.success('The input is {}'.format(input_df))
    predictions = predictions_df['Label'][0]
    return predictions



def run():

    add_selectbox = st.sidebar.selectbox(
    "How would you like to predict?",
    ("Online", "Batch"))

    st.sidebar.info('This app is created to predict review for Kindle books from Amazon')
      
    st.title("Kindle book reviews Prediction App")

    if add_selectbox == 'Online':

        user_review = st.text_input('User Review', value='Enter your Review')
      
        output=""

        input_dict = {'user_review' : user_review}
        input_df = pd.DataFrame([input_dict])

             
        tf_vectorizer = CountVectorizer()
        features = tf_vectorizer.fit_transform(input_df['user_review'].apply(lambda features : np.str_(features)))
        features_df = pd.DataFrame(features.toarray(), columns=tf_vectorizer.get_feature_names())

        dummy = new_predict_df.head(1)
        dummy[dummy > 0] = 0
                

        for col in dummy:
            try:
                dummy[col] = features_df[col]
            except:
                pass

        predict_df = dummy.fillna(0)
        
        
        
        
        if st.button("Predict"):
           
            st.success('INPUT : {}'.format(user_review))
       
            #output = predict(model=model, input_df=predict_df)
            output = model.predict(predict_df)
            #output = '$' + str(output)
            if output == 1 :
                prcd = "positive"
            if output == 0 :
                prcd = "negative"
                
            rating = model_rating.predict(predict_df)    
                
            prcd = str(prcd) 
            prcd1 = rating
            st.success('OUTPUT :  This is a {} review '.format(prcd))
            st.success('Predicted user rating is {}'.format(prcd1))
            
    if add_selectbox == 'Batch':
            file_upload = st.file_uploader("Upload csv file for prediction",type = ["csv"])
            
            if file_upload is not None:
                data = pd.read_csv(file_upload)
                
                tf_vectorizer = CountVectorizer()
                features = tf_vectorizer.fit_transform(data['reviewText'].apply(lambda features : np.str_(features)))
                features_df = pd.DataFrame(features.toarray(), columns=tf_vectorizer.get_feature_names())

                dummy = new_predict_df.head(1)
                dummy[dummy > 0] = 0
                

                for col in dummy:
                    try:
                        dummy[col] = features_df[col]
                    except:
                        pass

                predict_df = dummy.fillna(0)
        

                st.success('Predicted user ratings are : ')
                predictions = model_rating.predict(predict_df)  
                st.write(predictions)

if __name__ == '__main__':
    run()








